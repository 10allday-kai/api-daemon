default:
# Use stable Rust
  image: ${CI_REGISTRY}/kaios/sidl:1.49.0_1
  tags:
    - hk-fantastic4
  before_script:
    - |
      if [[ ${CI_JOB_NAME%%:*} == update ]]; then
        echo -e "\033[1;33mFor job [${CI_JOB_NAME}], restore ssh-settings for git-push. \033[0m"
        eval $(ssh-agent -s)
        ssh-add <(echo "$SSH_PRIVATE_KEY")
        mkdir -p ~/.ssh
        [[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
      fi
    - |
      echo -e "machine ${CI_SERVER_HOST}\nlogin gitlab-ci-token\npassword ${CI_JOB_TOKEN}" > ~/.netrc
      git config --global url."${CI_SERVER_URL}/".insteadOf "git@${CI_SERVER_HOST}:"
    - |
      if ${CI_USE_MIRROR}; then
        echo -e "\033[1;33mAlternatively use ${LOCAL_GIT_MIRROR} for git-clone. \033[0m"
        git config --global url."${LOCAL_GIT_MIRROR}/KaiOS".insteadOf "git@${CI_SERVER_HOST}:KaiOS"
      fi
    - rustc --version && cargo --version

# Environment variables
variables:
  GIT_SUBMODULE_STRATEGY: normal
  CARGO_HOME: $CI_PROJECT_DIR/cargo

before_script:
  - eval $(ssh-agent -s)
  - ssh-add <(echo "$SSH_PRIVATE_KEY")
  - mkdir -p ~/.ssh
  - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'

stages:
  - buildDaemon
  - test-js
  - cargo_tests
  - xbuild
  - production
  - dockerBuild

.build_base:
  stage: buildDaemon
  only:
    - merge_requests
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-build/
  needs: []

build:daemon:
  extends: .build_base
  tags:
    - gecko-dev
  script:
    - cd $CI_PROJECT_DIR/daemon
    # Fail when encountering clippy warnings.
    - cargo clippy --all-targets -- -D warnings
    - cargo build --release --features=fake-tokens
  artifacts:
    expire_in: 1 week
    paths:
      - target/release/api-daemon
      - services/accounts/client/generated/accounts_service.js
      - services/apps/client/generated/apps_service.js
      - services/audiovolumemanager/client/generated/audiovolume_service.js
      - services/contacts/client/generated/contacts_service.js
      - services/devicecapability/client/generated/devicecapability_service.js
      - services/libsignal/client/generated/libsignal_service.js
      - services/powermanager/client/generated/powermanager_service.js
      - services/procmanager/client/generated/procmanager_service.js
      - services/settings/client/generated/settings_service.js
      - services/telephony/client/generated/telephony_service.js
      - services/tcpsocket/client/generated/tcpsocket_service.js
      - services/time/client/generated/time_service.js
      - services/fota/client/generated/fota_service.js

build:daemon:test:essentials:
  extends: .build_base
  variables:
    test_essentials: "child-test-daemon tests/driver tests/fota-test-server"
  script:
    - |
      for te in ${test_essentials}; do
        echo -e "\033[1;33mBuilding ${te}\033[0m"
        cargo build --manifest-path ${CI_PROJECT_DIR}/${te}/Cargo.toml --release
      done
  artifacts:
    expire_in: 1 week
    paths:
      - target/release/child-test-daemon
      - target/release/fota_test_server
      - target/release/driver
      - services/test/client/generated/test_service.js

.tests_job_base:
  only:
    - merge_requests
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-test/
      - $CI_COMMIT_MESSAGE =~ /skip-build/

# Use cargo to test the project
.test_cargo:
  extends: .tests_job_base
  stage: cargo_tests
  script:
# Force build.rs to run despite the cache.
    - touch ./services/libsignal/build.rs ./support/libsignal-sys/build.rs ./services/telephony/build.rs ./services/test/build.rs
    - cd ${CI_PROJECT_DIR}/$(sed 's/\:/\//' <<< ${CI_JOB_NAME#"test:cargo:"})
    - cargo test -- --nocapture
  needs:
    - job: 'build:daemon'

test:cargo:services:apps:
  extends: .test_cargo

test:cargo:daemon:
  extends: .test_cargo

test:cargo:common:
  extends: .test_cargo

test:cargo:support:android-utils:
  extends: .test_cargo

test:cargo:support:kauth:
  extends: .test_cargo

test:cargo:support:kus:
  extends: .test_cargo

test:cargo:support:hamster:
  extends: .test_cargo

test:cargo:support:sqlite-utils:
  extends: .test_cargo

test:cargo:support:kota:
  extends: .test_cargo

test:cargo:codegen:
  extends: .test_cargo

test:cargo:support:libsignal-sys:
  extends: .test_cargo

test:cargo:parser:
  extends: .test_cargo

test:cargo:telemetry:
  extends: .test_cargo

# test:cargo:tcpsocket-service:
#   extends: .test_cargo

test:cargo:services:devicecapability:
  extends: .test_cargo

test:cargo:services:deviceconfig:
  extends: .test_cargo

test:cargo:services:libsignal:
  extends: .test_cargo

test:cargo:services:settings:
  extends: .test_cargo

test:cargo:services:telephony:
  extends: .test_cargo

test:cargo:vhost:
  extends: .test_cargo

test:js-clients:
  extends: .tests_job_base
  stage: test-js
  script:
    - cd $CI_PROJECT_DIR
    - git clone git@git.kaiostech.com:vincent.chang/echo-server.git
    - cd echo-server
    - cargo build
    - ./target/debug/echo-server 7878&
    - ./target/debug/echo-server 7879&
    - ./target/debug/echo-server 7880&
    - cd $CI_PROJECT_DIR
    - WITH_TEST_SERVICE=1 ./release_libs.sh
    - mkdir -p ./daemon/remote/TestService
    - cp ./target/release/child-test-daemon $CI_PROJECT_DIR/daemon/remote/TestService/daemon
    - $CI_PROJECT_DIR/tests/webdriver.sh file://$CI_PROJECT_DIR/services/apps/client/test/tests.html
    - $CI_PROJECT_DIR/tests/webdriver.sh file://$CI_PROJECT_DIR/services/audiovolumemanager/client/test/tests.html
    - $CI_PROJECT_DIR/tests/webdriver.sh file://$CI_PROJECT_DIR/services/contacts/client/test/tests.html
    - $CI_PROJECT_DIR/tests/webdriver.sh file://$CI_PROJECT_DIR/services/devicecapability/client/test/tests.html
    # There are several test files for libsignal to break down features.
    # TODO: run them in parallel
    - $CI_PROJECT_DIR/tests/webdriver.sh file://$CI_PROJECT_DIR/services/libsignal/client/test/global_context.html
    - $CI_PROJECT_DIR/tests/webdriver.sh file://$CI_PROJECT_DIR/services/libsignal/client/test/session_builder_cipher.html
    - $CI_PROJECT_DIR/tests/webdriver.sh file://$CI_PROJECT_DIR/services/libsignal/client/test/group_messages.html
    - $CI_PROJECT_DIR/tests/webdriver.sh file://$CI_PROJECT_DIR/services/powermanager/client/test/tests.html
    - $CI_PROJECT_DIR/tests/webdriver.sh file://$CI_PROJECT_DIR/services/settings/client/test/tests.html
    - $CI_PROJECT_DIR/tests/webdriver.sh file://$CI_PROJECT_DIR/services/tcpsocket/client/test/tests.html
    - $CI_PROJECT_DIR/tests/webdriver.sh file://$CI_PROJECT_DIR/services/test/client/test/tests.html
    - $CI_PROJECT_DIR/tests/webdriver.sh file://$CI_PROJECT_DIR/services/time/client/test/tests.html
    - $CI_PROJECT_DIR/tests/webdriver_fota.sh file://$CI_PROJECT_DIR/services/fota/client/test/tests_server_error.html
    - $CI_PROJECT_DIR/tests/webdriver_fota.sh file://$CI_PROJECT_DIR/services/fota/client/test/tests_no_package.html
    - $CI_PROJECT_DIR/tests/webdriver_fota.sh file://$CI_PROJECT_DIR/services/fota/client/test/tests_check_update.html
    - $CI_PROJECT_DIR/tests/webdriver_fota.sh file://$CI_PROJECT_DIR/services/fota/client/test/tests_full.html
  needs:
    - job: 'build:daemon'
    - job: 'build:daemon:test:essentials'

# test-libsignal:
#   extends: .tests_job_base
#   script:
#     - cd $CI_PROJECT_DIR
#     - ./release_libs.sh
#     - cp $CI_PROJECT_DIR/libsignal-service/test-fixtures/example3 $CI_PROJECT_DIR/prebuilts/http_root/war_and_peace.enc
#     - cd $CI_PROJECT_DIR/daemon
#     - export WS_RUNTIME_TOKEN=secrettoken
#     - RUST_LOG=info ../target/debug/api-daemon &
#     - cd $CI_PROJECT_DIR/libsignal-service/client/
#     - export DISPLAY=:99
#     - Xvfb :99 > /dev/null 2>&1 &
#     - export RESTART_DAEMON_FLAG_FILE=restart_daemon_flag_file
#     - ./test/restartDaemon.sh &
#     - export KILL_DAEMON_FLAG_FILE=kill_daemon_flag_file
#     - ./test/killDaemon.sh &
#     - yarn ci-test
#     - rm $CI_PROJECT_DIR/prebuilts/http_root/war_and_peace.enc
# # the last test kills api-daemon

.clone_build_sidl: &clone_build_sidl
  - |
    git clone git@git.kaiostech.com:KaiOS/build-sidl.git -b multi-arch
    cd build-sidl
  - git log -1 --decorate

.build_targets_base:
  stage: xbuild
  tags: ['gecko-dev']
  script:
    - cd $CI_PROJECT_DIR
    - git clone git@git.kaiostech.com:kaios/build-sidl.git -b multi-arch
    - cd build-sidl
    - ./build_api-daemon.sh
  artifacts:
    expire_in: 1 week
    paths:
      - production
  needs: []

verify:build:targets:
  extends: .build_targets_base
  only:
    - merge_requests
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-build/

build:targets:
  extends: .build_targets_base
  only:
    - branches@KaiOS/sidl

update:targets:
  stage: production
  script:
    - *clone_build_sidl
    - ./update_api-daemon.sh
  only:
    - branches@KaiOS/sidl
  needs:
    - job: 'build:targets'

update:tag:
  stage: production
  variables:
    # source of sidl in this job is absolutely unnecessary
    GIT_STRATEGY: none
    API_DAEMON_DEST_REPO: KaiOS/api-daemon.git
    # unable to acquire CI_BRANCH_NAME from predefined variables when triggered by "tags"
    # hence we self-define here
    API_DAEMON_DEST_BRANCH: next
  before_script:
    # re-override as local mirror is unnecessary but write-access here
    - |
      eval $(ssh-agent -s)
      ssh-add <(echo "$SSH_PRIVATE_KEY")
      mkdir -p ~/.ssh
      [[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - |
      ret=$(git ls-remote --tags --exit-code \
        git@${CI_SERVER_HOST}:${API_DAEMON_DEST_REPO} ${CI_COMMIT_TAG})
      if [ ${ret} -eq 0 ]; then
        echo "${CI_COMMIT_TAG} already exists in ${API_DAEMON_DEST_REPO} !"
        exit 1
      fi
  script:
    - echo ${CI_COMMIT_TAG}
    - |
      git_url="git@${CI_SERVER_HOST}:"
      if ${CI_USE_MIRROR}; then
        git_url="${LOCAL_GIT_MIRROR}/"
      fi
    - git clone "${git_url}${API_DAEMON_DEST_REPO}" -b ${API_DAEMON_DEST_BRANCH}
    - cd api-daemon
    - 'coresponding_commit=$(git rev-list HEAD --grep="Source: ${CI_PROJECT_PATH}@${CI_COMMIT_SHA}" -F -1)'
    - |
      if [[ -z ${coresponding_commit} ]]; then
        echo "Unable to filter out with the pattern \"Source: ${CI_PROJECT_PATH}@${CI_COMMIT_SHA}\""
        echo "Alternatively look for the corresponding commit by CI_COMMIT_TITLE"
        coresponding_commit=$(git rev-list HEAD --grep="${CI_COMMIT_TITLE}" -F -1)
        if [[ -z ${coresponding_commit} ]]; then
          echo "Unable to find the coresponding commit by either SHA1 or commit message title."
          exit -1
        fi
      fi
    - |
      echo
      echo "Corresponding commit that was automatically submitted to api-daemon:"
      git show ${coresponding_commit} -q
    - git remote set-url --push origin "git@${CI_SERVER_HOST}:${API_DAEMON_DEST_REPO}"
    - git push origin ${coresponding_commit}:refs/tags/${CI_COMMIT_TAG}
  only:
    - tags@KaiOS/sidl

.build_docker:
  image: docker:19.03.1
  stage: dockerBuild
  tags:
    - releng
  variables:
    GIT_DEPTH: "1"
    DOCKER_BUILD_TAG: ${CI_REGISTRY_IMAGE}:$CI_COMMIT_SHA
  before_script:
    - echo "nothing to do. Override default before_script."
  script:
    - docker build --no-cache -t $DOCKER_BUILD_TAG - < docker/Dockerfile > ${CI_PIPELINE_ID}-${CI_JOB_NAME}.log 2>&1
  artifacts:
    name: ${CI_PIPELINE_ID}
    when: always
    expire_in: 1 day
    paths:
      - "${CI_PIPELINE_ID}-${CI_JOB_NAME}.log"

verify:build:docker:
  extends: .build_docker
  only:
    refs:
      - merge_requests
    changes:
      - docker/Dockerfile

build:docker:
  extends: .build_docker
  variables:
    CONTAINER_RELEASE_TAG: ${CI_REGISTRY_IMAGE}
  before_script:
    - 'echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin'
  script:
    - |
      RELEASETAG=`cat docker/Dockerfile | grep RELEASETAG | cut -f 2 -d ' '`
      docker build --no-cache -t ${CI_REGISTRY_IMAGE}:${RELEASETAG} - < docker/Dockerfile > ${CI_PIPELINE_ID}-${CI_JOB_NAME}.log 2>&1
      docker push ${CI_REGISTRY_IMAGE}:${RELEASETAG}
  only:
    refs:
      - branches@KaiOS/sidl
    changes:
      - docker/Dockerfile
